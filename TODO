todo
----

Active development:

- remove sexyicon code - I remember someone complaining that gedit was 
misusing this, so we shouldn't copy them!  
- Perhaps find a work around for the gtk sensitivity bug.
  (Ref: http://bugzilla.gnome.org/show_bug.cgi?id=56070)
  - Ideally I'd like to implement my original idea which is that buttons
    should disapear from the toolbar when they can't be pressed.
    (special care taken e.g. for the "next" button so that we don't
     re-layout for every click)
- improve the menus
   - edit preferences needs some attention:
     - changes should take effect immediatly
   - implement help->about
- Support adding of custom expressions to the variables window, e.g.
  by highlighting them within the source view and dragging them accross.
- test the interrupt button.
  - related: ensure that there is user feedback when the debugger
    is busy in the "running" state.
- try and seperate/abstract things so that the variable
  view and stack view work somewhat like mini plugins.
- implement socket based connections to a gswat-spawner
- Ctrl-Q doesn't quit
- implement a text command based interface
  - commands should have long descriptive names
  - allow customisable aliases
    - by default provide aliases intuative to a gdb user
- I'd like to make the breakpoint/current line highlights a bit more
  pretty using some cairo magic.
- The ordering of variables is in-consistent; especially the ordering
  of struct members can change which is confusing to the user.
- Improve our implementation of the "session" paradigm:
  - support specification of a sessions environment variables
  - The New Session dialog should consistently list previous sessions
    indexed by date. - currenly the order changes each time the dialog
    is opened.
  - So much more should be associated with sessions.
   - e.g. The ordering of local variables - associated with a particular
     stack frame layout
   - The format of variables
   - Default breakpoints
   - list of source directories
  - Note, some effort really needs to go into making sure that session
    state is always consistent on disc, so we cope with crashes while
    writting out new session state. E.g. a more formal "write new 
    data to tmp file, then atomic replace old with new", type process.
- Gracefully handle file not found problems, with clear user feedback
  and give an opertunity to extend the list of source directories.



--------------------------------------------------------------------

summary of blockers for early preview release:
- Segfaults/FPEs should be handled!!
- Help->About, with homepage and bugtracker links
- Fix Edit->Preferences to _some_ degree.


Preliminary Roadmap for 1.0 release:
- Improved source navigation facilities
 - Support "Source Browser" tabs, and when selected:
  - The variable/stack views will be replaced by 2 full height
    tabs:
     - A file browser tree view.
     - A symbol listing for the current file.
  - The control flow buttons such as "Step In" and "Next" will
    be replace with source navigation buttons; e.g. "Go To"
  - Support generation/updating of a ctag/global symbol index
   - Note: indexing needs to be lazy/user prompted since the amount
     of IO is liable to make your machine crawl for a while, esp
     with huge code-bases.
   - Need to support indexing of multiple repositories.
  - Support either the VIM style stack metaphor for traversing
    symbols, or the web-browser metaphor
  - Support creation of breakpoints 
- Socket based spawner process connections
- KGDB support
- Textual command interface, embedded in the GUI.
 - Note this project is _NOT_ about providing yet another GDB
   frontend. That means exposing the GDB command line interface
   is not appropriate!
 - The design must be re-usable by other non gdb backends.
 - The intention is to also make this interface the basis for
   regression testing, by implementing a minimal command line
   (in the vt100 sense) debugger that can read commands
   from standard in, and put a simple framwork in place for
   validating the output.
- Plugin API
- Python Plugin API bindings

Possible 2.0 Roadmap:
- Seamless GDB->KGDB integration!
 - e.g. stepping into ioctls, straight through to some driver
   specific handler.
- Support at least one other _non GDB_ backend, e.g. a python
  debugger or perhaps a bash debugger.
- Distro integration:
  - E.g. if a desktop app segfaults, then I'd like to see a
    dialog box asking; Do you want to debug the crash?, and
    if the app doesn't already have debug symbols I'd like
    to e.g. be asked; Do you want to install a debug version of
    this application? Implementing this is going to be distro
    specific though. 1st you need to associate the crashed
    app to a distro package, then if it's a binary distro you
    need to either find the devel/debug equivalent, or source
    based you need to enable debug flags for re-compilation.
- 
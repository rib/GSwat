todo
----

Active development:

- remove sexyicon code - I remember someone complaining that gedit was 
misusing this, so we shouldn't copy them!  
- Perhaps find a work around for the gtk sensitivity bug.
  (Ref: http://bugzilla.gnome.org/show_bug.cgi?id=56070)
  - Ideally I'd like to implement my original idea which is that buttons
    should disapear from the toolbar when they can't be pressed.
    (special care taken e.g. for the "next" button so that we don't
     re-layout for every click)
- improve the menus
   - edit preferences is currently broken
   - implement help->about
- Perhaps add mouse over variable bubbles to display their value
 - also allow highlighting expressions
 - Consider not using bubbles though since they get in the way
   of code.
- test the interrupt button.
  - related: ensure that there is user feedback when the debugger
    is busy in the "running" state.
- Support clicking on frame entries within the stack view
  - So that the source view gets updated appropriatly.
  - So that local variables get updated appropriatly. (done)
- try and seperate/abstract things so that the variable
  view and stack view work somewhat like mini plugins.
- implement socket based connections to a gswat-spawner
- Ctrl-Q doesn't quit
- implement a text command based interface
  - commands should have long descriptive names
  - allow customisable aliases
    - by default provide aliases intuative to a gdb user
- The debuggable interface currently exposes a "state"
  property that increments to represent _any_ changes to
  the debuggables internal state. This is far too general
  and should be replaced with more focused property
  notifications.

--------------------------------------------------------------------

summary of blockers for early preview release:
- Ability to switch between stack frames
- Help->About, with homepage and bugtracker links
- Fix Edit->Preferences to _some_ degree.


Preliminary Roadmap for 1.0 release:
- Socket based spawner process connections
- KGDB support
- Textual command interface
 - Note this project is _NOT_ about providing yet another GDB
   frontend. That means exposing the GDB command line interface
   is not appropriate!
- Plugin API
- Python Plugin API bindings

Possible 2.0 Roadmap:
- Seamless GDB->KGDB integration!
 - e.g. stepping into ioctls, straight through to some driver
   specific handler.
- Support at least one other _non GDB_ backend, e.g. a python
  debugger or perhaps a bash debugger.
